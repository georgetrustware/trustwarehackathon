{
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "unused-imports"],
  "ignorePatterns": ["scripts/*", "wagmi1/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"], // Your TypeScript files extension

      // As mentioned in the comments, you should extend TypeScript plugins here,
      // instead of extending them outside the `overrides`.
      // If you don't want to extend any rules, you don't need an `extends` attribute.
      "extends": [
        "plugin:@typescript-eslint/recommended",
        // "plugin:@typescript-eslint/recommended-type-checked",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/stylistic",
        // "plugin:@typescript-eslint/stylistic-type-checked",
        "airbnb-typescript"
      ],
      "rules": {
        //
        // ##### These rules should be set to ERROR #####
        //
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/prefer-function-type": "error",

        // Rules below this point will be enabled soon
        // They are only set to WARN because they would make the build fail
        // If you are a developer setting a rule to WARN to make a build work, ADD IT HERE PLEASE
        // Please don't turn rules OFF without getting permission
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": "enum",
            "format": ["PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "function",
            "modifiers": ["exported"],
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "format": ["camelCase", "snake_case", "UPPER_CASE"],
            "types": ["array", "boolean", "number", "string"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "variable",
            "types": ["function"],
            "modifiers": ["exported"],
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "forbid"
          },
          // {
          //   "selector": "variable",
          //   "custom": { "match": true, "regex": "^[A-Z][w]+Context$" },
          //   "format": ["snake_case"],
          //   "leadingUnderscore": "forbid"
          // },
          {
            "selector": "variable",
            "modifiers": ["exported"],
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": "variable",
            "modifiers": ["destructured"],
            "format": ["camelCase", "snake_case"]
          }
        ],
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-misused-promises": "warn",
        "@typescript-eslint/no-shadow": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-use-before-define": "warn",
        "@typescript-eslint/no-useless-constructor": "warn",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/require-await": "warn",
        "@typescript-eslint/return-await": "warn",
        "import/no-extraneous-dependencies": "warn",

        //
        // ##### These rules should be set to WARN #####
        //
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-redundant-type-constituents": "warn",
        "@typescript-eslint/no-unsafe-argument": "warn",

        // ##### We could turn these off if we want to #####
        // no-unsafe-call doesn't let you call any typed functions
        "@typescript-eslint/no-unsafe-call": "warn",
        // no-unsafe-member-access doesn't let you use properties on any types
        "@typescript-eslint/no-unsafe-member-access": "warn",
        // no-unsafe-return  doesn't let you return anything with any as the type
        "@typescript-eslint/no-unsafe-return": "warn",

        //
        // ##### These rules should be set to OFF #####
        //
        // These rules are turned off because they're inconvenient. Leave them off
        // no-unsafe-assignment doesn't allow assigning any as type
        "@typescript-eslint/no-unsafe-assignment": "off",
        // no-unused-vars is handled by unused-imports library
        "@typescript-eslint/no-unused-vars": "off",

        // These rules conflict with prettier so they are disabled
        "@typescript-eslint/comma-dangle": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/semi": "off"
      },

      "parserOptions": {
        "project": true // Specify it only for TypeScript files
        // or `project: true` in typescript-eslint version >= 5.52.0
      }
    }
  ],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "next",
    "next/core-web-vitals",
    "prettier"
  ],
  "rules": {
    "@next/next/no-html-link-for-pages": ["error", "trustware-next/src/pages"],
    "no-alert": "error",
    "no-console": [
      "warn",
      {
        "allow": ["info", "error"]
      }
    ],
    "no-unused-vars": "off",
    "react/function-component-definition": "warn",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ]
  }
}
